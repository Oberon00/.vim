# IF-THEN-ELSE {{{1 #

snippet if "IF-THEN block statement"
IF ${1:cond} THEN BEGIN
	${0:${VISUAL}}
END; (* IF *)
endsnippet

snippet ife "IF-THEN-ELSE block statement"
IF ${1:cond} THEN BEGIN
	$2
END ELSE BEGIN
	$2
END; (* IF *)
endsnippet

snippet el "ELSE block statement"
ELSE BEGIN
	${0:${VISUAL}}
END; (* IF *)
endsnippet

snippet eli "END-ELSE-IF-THEN block statement"
ELSE IF {$1:cond} THEN BEGIN
	${0:${VISUAL}}
END; (* IF *)
endsnippet

# 1}}} #

# Loops {{{1 #

snippet for "FOR TO block statement" b
FOR ${1:i} := ${2:Low(${3:arr})} TO ${4:High($3)} DO BEGIN
	${0:${VISUAL}}
END; (* FOR $1 *)
endsnippet

snippet ford "FOR DOWNTO block statement" b
FOR ${1:i} := ${2:High(${3:arr})} DOWNTO ${4:Low($3)} DO BEGIN
	${0:${VISUAL}}
END; (* FOR $1 *)
endsnippet

snippet while "WHILE-DO block statement" b
WHILE ${1:cond} DO BEGIN
	${0:${VISUAL}}
END; (* WHILE *)
endsnippet

snippet repeat "REPEAT-UNTIL statement" b
REPEAT
	${0:${VISUAL}}
UNTIL ${1:breakcond};
endsnippet

# 1}}} #


# CASE OF {{{1 #

snippet case "CASE OF statement" b
CASE ${1:switch} OF
	${2:constval}: $3
	ELSE $4
END; (* CASE $1 OF *)
endsnippet

snippet caseb "CASE OF statement with block cases" b
CASE ${1:switch} OF
	${2:constval}: BEGIN
		$3
	END; (* CASE $2 *)
	ELSE
		$4
END; (* CASE $1 OF *)
endsnippet

# 1}}} #


# Functions/procedures {{{1 #

# {{{
snippet "fun(c(tion)?)?" "Function definiton" br
FUNCTION ${1:funcname}${2:($3)}: ${4:TRes};
BEGIN
	${0:$1 := ${5:${VISUAL}}};
END; (* $1 *)

endsnippet

snippet "pro(c(edure)?)?" "Procedure definiton" br
PROCEDURE ${1:procname}${2:($3)};
BEGIN
	$0
END; (* $1 *)

endsnippet

snippet fund "Function declaration" b
FUNCTION ${1:funcname}${2:($3)}: ${4:TRes};
endsnippet

snippet prod "Procedure declaration" b
PROCEDURE ${1:procname}${2:($3)};
endsnippet

# 1}}} #


# Types (records) {{{1 #

snippet record "RECORD definition body"
RECORD
	$0
END; (* ${1:TRec} *)

endsnippet

priority 1
snippet record "RECORD definition" b
${1:TRec} = RECORD
	$0
END; (* $1 *)
endsnippet
priority 0

# 1}}} #


# Program/Unit header {{{1 #

snippet program "PROGRAM header" b
(* ${1:`!v expand('%:r')`}: C. Neumueller, `!v strftime('%Y-%m-%d')` *)
(* ${2:The `!v expand('%:r')` program.} *)
PROGRAM $1;

	$0

BEGIN (* $1 *)
	$3
END. (* $1 *)

endsnippet

snippet unit "UNIT header" b
(* ${1:`!v expand('%:r')`}: C. Neumueller, `!v strftime('%Y-%m-%d')` *)
(* ${2:The `!v expand('%:r')` unit.} *)
UNIT $1;

INTERFACE

	$4

IMPLEMENTATION

	$0

BEGIN (* $1 *)
	$3
END. (* $1 *)

endsnippet

# 1}}} #
