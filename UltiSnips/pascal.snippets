# IF-THEN-ELSE {{{1 #

snippet "(?i)if" "IF-THEN block statement" r
IF ${1:cond} THEN BEGIN
	${0:${VISUAL}}
END; (* IF *)
endsnippet

snippet "(?i)ife" "IF-THEN-ELSE block statement" r
IF ${1:cond} THEN BEGIN
	$2
END ELSE BEGIN
	$2
END; (* IF *)
endsnippet

snippet "(?i)el" "ELSE block statement" r
ELSE BEGIN
	${0:${VISUAL}}
END; (* IF *)
endsnippet

snippet "(?i)END; \(\* IF \*\)" "END-ELSE-BEGIN block" r
END ELSE BEGIN
	${0:${VISUAL}}
END; (* IF *)
endsnippet

snippet "(?i)END; \(\* IF \*\)i" "END-ELSE-IF-THEN-BEGIN block" r
END ELSE IF ${1:cond} THEN BEGIN
	${0:${VISUAL}}
END; (* IF *)
endsnippet

snippet "(?i)eli" "ELSE-IF-THEN block statement" r
ELSE IF {$1:cond} THEN BEGIN
	${0:${VISUAL}}
END; (* IF *)
endsnippet

# 1}}} #

# Loops {{{1 #

snippet "(?i)for" "FOR TO block statement" br
FOR ${1:i} := ${2:Low(${3:arr})} TO ${4:High($3)} DO BEGIN
	${0:${VISUAL}}
END; (* FOR $1 *)
endsnippet

snippet "(?i)ford" "FOR DOWNTO block statement" br
FOR ${1:i} := ${2:High(${3:arr})} DOWNTO ${4:Low($3)} DO BEGIN
	${0:${VISUAL}}
END; (* FOR $1 *)
endsnippet

snippet "(?i)while" "WHILE-DO block statement" br
WHILE ${1:cond} DO BEGIN
	${0:${VISUAL}}
END; (* WHILE *)
endsnippet

snippet "(?i)repeat" "REPEAT-UNTIL statement" br
REPEAT
	${0:${VISUAL}}
UNTIL ${1:breakcond};
endsnippet

# 1}}} #


# CASE OF {{{1 #

snippet "(?i)case" "CASE-OF statement" br
CASE ${1:switch} OF
	${2:constval}: $3
	ELSE $4
END; (* CASE $1 OF *)
endsnippet

snippet "(?i)caseb" "CASE-OF statement with block cases" br
CASE ${1:switch} OF
	${2:constval}: BEGIN
		$3
	END; (* $2 *)
	ELSE
		$4
END; (* CASE $1 OF *)
endsnippet

snippet "(\s*)(.+)\s*:" "CASE-OF CASE block" br
`!p snip.rv = match.group(0)` BEGIN
	`!p snip.rv = match.group(1)`$2
`!p snip.rv = match.group(1)`END; (* `!p snip.rv = match.group(2)` *)
endsnippet
# 1}}} #


# Functions/procedures {{{1 #

# {{{
snippet "(?i)fun(c(tion)?)?" "Function definiton" br
FUNCTION ${1:funcname}${2:($3)}: ${4:TRes};
BEGIN
	${0:$1 := ${5:${VISUAL}}};
END; (* $1 *)

endsnippet

snippet "(?i)pro(c(edure)?)?" "Procedure definiton" br
PROCEDURE ${1:procname}${2:($3)};
BEGIN
	${0:${VISUAL}}
END; (* $1 *)
endsnippet

global !p
import re
_forward_pat = re.compile(ur'\s*forward\s*;\s*\Z', re.I)
def fn_proc_impl_head():
	s = _forward_pat.sub('', match.group(0), 1)
	return s if s.endswith(';') else s + ';'
endglobal

snippet "(?i)function\s+([A-Za-z_]\w*).*;" "Function implementation" br
`!p snip.rv = fn_proc_impl_head()`
BEGIN
	${0:`!p snip.rv = match.group(1)` := $1}
END; (* `!p snip.rv = match.group(1)` *)
endsnippet

snippet "(?i)procedure\s+([A-Za-z_]\w*).*;" "Procedure implementation" br
`!p snip.rv = fn_proc_impl_head()`
BEGIN
	$0
END; (* `!p snip.rv = match.group(1)` *)
endsnippet

snippet "(?i)fund" "Function declaration" br
FUNCTION ${1:funcname}${2:($3)}: ${4:TRes};
endsnippet

snippet "(?i)prod" "Procedure declaration" br
PROCEDURE ${1:procname}${2:($3)};
endsnippet

# 1}}} #


# Types (records) {{{1 #

snippet "(?i)record" "RECORD definition body" r
RECORD
	$0
END; (* ${1:TRec} *)

endsnippet

priority 1
snippet "(?i)record" "RECORD definition" br
${1:TRec} = RECORD
	$0
END; (* $1 *)
endsnippet
priority 0

# 1}}} #


# Program/Unit header {{{1 #

snippet "(?i)program" "PROGRAM header" br
(* ${1:`!v expand('%:r')`}: C. Neumueller, `!v strftime('%Y-%m-%d')` *)
(* ${2:The `!v expand('%:r')` program.} *)
PROGRAM $1;

	$0

BEGIN (* $1 *)
	$3
END. (* $1 *)

endsnippet

snippet "(?i)unit" "UNIT header" br
(* ${1:`!v expand('%:r')`}: C. Neumueller, `!v strftime('%Y-%m-%d')` *)
(* ${2:The `!v expand('%:r')` unit.} *)
UNIT $1;

INTERFACE

	$4

IMPLEMENTATION

	$0

BEGIN (* $1 *)
	$3
END. (* $1 *)

endsnippet

# 1}}} #

snippet "(?i)begin" "BEGIN-END block" r
BEGIN
	${0:${VISUAL}}
END; (* ${1:TODO} *)
endsnippet

# vim: foldmethod=marker
